- name: check newpythonpath exist
  stat:
    path: "/tmp/newpythonpath"
  register: newpythonpathexist

- name: read /tmp/newpythonpath
  slurp:
    src: "/tmp/newpythonpath"
  register: newpython
  when: newpythonpathexist.stat.exists

- name: check newpython exist
  stat:
    path: "{{ newpython.content | b64decode }}"
  register: pythonexist
  when: newpythonpathexist.stat.exists

- name: copy python
  copy:
    src: "{{ ansible_python.executable }}"
    dest: "{{ newpython.content | b64decode }}"
    mode: '0755'
    remote_src: true
  become: true
  when: newpythonpathexist.stat.exists and ansible_python.executable != newpython and not pythonexist.stat.exists

- name: save python
  copy:
    content: "{{ ansible_python.executable }}"
    dest: "/tmp/pythonbackupdata"

- name: Set lab vars
  include_vars: "labs/{{ labId }}/config.yaml"

- name: remove old python
  raw: "rm {{ ansible_python.executable }}"
  become: true
  when: newpythonpathexist.stat.exists and ansible_python_interpreter != ansible_python.executable and not pythonexist.stat.exists

- name: Get wanip
  set_fact:
    wanip: "{{ network | ansible.utils.nthhost(ipindex | int) }}"

- name: Backup resolv.conf
  copy: 
    src: "/etc/resolv.conf"
    dest: "/tmp/resolv.conf.bak"
    remote_src: true
  become: true

- name: Main
  block:
    - name: Make .ssh
      file: 
        path: "~/.ssh"
        state: directory
      when: not checkonhost
    
    - name: Check ssh config
      stat:
        path: "~/.ssh/config"
      register: sshconfig

    - name: Backup ssh config
      copy: 
        src: "~/.ssh/config"
        dest: "/tmp/ssh.config.bak"
        remote_src: true
      when: sshconfig.stat.exists

    - name: Set ssh config
      template:
        src: "templates/ssh.config"
        dest: "~/.ssh/config"

    - name: Install package
      package:
        name: "{{ package }}"
      become: true

    - name: Check resolv.conf bak
      stat:
        path: "/tmp/resolv.conf.bak"
      register: resolvconfig
      become: true

    - name: Restore resolv.conf
      copy: 
        src: "/tmp/resolv.conf.bak"
        dest: "/etc/resolv.conf"
        remote_src: true
      become: true
      when: resolvconfig.stat.exists

    - name: Send script to worker
      copy:
        src: "labs/{{ labId }}/"
        dest: "/tmp/{{ taskId }}/"
    
    - name: Send remote script to worker
      copy:
        src: "remote.yml"
        dest: "/tmp/{{ taskId }}/remote.yml"

    - name: Make workspace
      file: 
        path: "/tmp/{{ taskId }}/workspace"
        state: directory

    - name: Set global vars
      include_tasks: "setglobalvars.yml"
      loop: "{{ data }}"
      loop_control:
        loop_var: nowdata

    - name: Remove temp dir
      file: 
        path: "/tmp/{{ taskId }}"
        state: absent
      ignore_errors: true
      delegate_to: localhost

    - name: Temp dir
      file: 
        path: "/tmp/{{ taskId }}"
        state: directory
      delegate_to: localhost
    
    - name: Install ansible-galaxy
      command: "ansible-galaxy collection install -r /tmp/{{ taskId }}/requirements.yml"
      ignore_errors: true
    
    - name: Install ansible-galaxy
      command: "ansible-galaxy role install -r /tmp/{{ taskId }}/requirements.yml"
      ignore_errors: true

    - name: taskpath
      set_fact:
        taskpath: ""

    - name: init taskpath
      set_fact:
        taskpath: "../"
        scriptname: "init"
    
    - name: init taskpath
      set_fact:
        taskpath: "../"
        scriptname: "{{ init.scriptname | default('init') }}"

    - name: Run init (script)
      command: 
        cmd: "{{ init.command }}"
        chdir: "/tmp/{{ taskId }}/workspace"
      become: "{{ init.become | default(false) }}"
      when: not (init.useansible | default(ansiblejudgescript))

    - name: Run init (ansible)
      include_tasks: "labs/{{ labId }}/{{ init.scriptname | default('init') }}.yml"
      when: (init.useansible | default(ansiblejudgescript))

    - name: set no forward
      command: "ipset add noforward {{ workerhost }}"
      become: true
      when: (noforward | default(false)) and not workerusedocker and not checkonhost
      delegate_to: localhost
    
    - name: Generate check list
      set_fact:
        checklistdict: "{{ checklistdict | default({}) | combine({ item:(range(checkpoints[item] | length) | list) }) }}"
      with_items: "{{ checkpoints }}"

    - name: Run checkpoints
      include_tasks: "checkgroup.yml"
      loop: "{{ checklistdict | dict2items }}"
      loop_control:
        loop_var: checklist

    - name: Output result
      copy:
        content: "{{ result | to_json }}"
        dest: "/tmp/{{ taskId }}/result"
      delegate_to: localhost
    
    - name: get output and error
      fetch:
        src: "/tmp/{{ taskId }}/{{ item }}"
        dest: "/tmp/{{ taskId }}/{{ item }}"
        flat: yes
      with_items:
      - stdout
      - stderr

  always:
    - name: include clear task
      include: clear.yml
